import { RunTemplateTest } from '../../index.test';
import {
	formatTypeScript,
	TypeScriptInputModels,
	TypeScriptResponseDataModels,
	TypeScriptResponseModels,
} from './index';

test('TypeScriptInputModels', async () => {
	const models = `// Code generated by wunderctl. DO NOT EDIT.
    
    export interface CreatePetInput {
        petInput: PetInput;
    }
    
    export interface PetInput {
        id: string;
        name?: string;
    }
    
    export type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;
    
    export type JSONObject = { [key: string]: JSONValue };
    
    export interface GraphQLError {
        message: string;
        path?: ReadonlyArray<string | number>;
    }
    `;
	const out = await RunTemplateTest(new TypeScriptInputModels());
	out.equals({
		'generated/models.ts': formatTypeScript(models),
	});
});

test('TypeScriptResponseModels', async () => {
	const models = `// Code generated by wunderctl. DO NOT EDIT.

    export interface MyReviewsResponse {
        data: MyReviewsResponseData;
        errors?: ReadonlyArray<GraphQLError>;
    }
    
    export interface CreatePetResponse {
        data: CreatePetResponseData;
        errors?: ReadonlyArray<GraphQLError>;
    }
    
    export interface NewPetsResponse {
        data: NewPetsResponseData;
        errors?: ReadonlyArray<GraphQLError>;
    }
    
    export interface MyReviewsResponseData {
        me?: {
            name?: string;
            reviews?: {
                id: string;
                body?: string;
            }[];
        };
    }
    
    export interface CreatePetResponseData {
        postPets?: {
            name?: string;
        };
    }
    
    export interface NewPetsResponseData {
        newPets?: {
            name?: string;
        };
    }
    
    export interface PetInput {
        id: string;
        name?: string;
    }
    
    export type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;

    export type JSONObject = { [key: string]: JSONValue };
    
    export interface GraphQLError {
        message: string;
        path?: ReadonlyArray<string | number>;
    }
    `;
	const out = await RunTemplateTest(new TypeScriptResponseModels(), new TypeScriptResponseDataModels());
	out.equals({
		'generated/models.ts': formatTypeScript(models),
	});
});
